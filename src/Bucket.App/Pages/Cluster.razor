@page "/"
            
@using Bucket.UseCases.Utils
@using MediatR
@using Bucket.Domain.Entities
@using Bucket.UseCases.Commands
@using Bucket.UseCases.Queries
@using Bucket.UseCases.Services
@using k8s.Models
@using Microsoft.Fast.Components.FluentUI

@inject IMediator _mediator
@inject CurrentContextService _currentContextService

<h1>Cluster</h1>

@if (_currentContextService.IsConnectedToCluster == false)
{
	<b>Not connected to cluster...</b>
}
else if (NodeList == null || NodeList.Items == null)
{
	<FluentProgressRing />
}
else
{
	<div>
		<p>Total CPU capacity: @TotalCPUsCapacity</p>
		<p>Total Memory capacity: @TotalMemoryCapacity Ki</p>
	</div>
}

@code {
	public V1NodeList NodeList = new();

	public long? TotalCPUsCapacity => NodeList?.Items?.Select(node => node.Status.Capacity["cpu"].Value)?.Sum(x => long.Parse(x));
	public long? TotalMemoryCapacity => NodeList?.Items?.Select(node => node.Status.Capacity["memory"].Value.ToLower().Replace("ki", ""))?.Sum(x => long.Parse(x));

	protected override async Task OnInitializedAsync()
	{
		NodeList = await _mediator.Send(new ListNodesQuery(), CancellationToken.None);
		StateHasChanged();

		using var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
		while (await timer.WaitForNextTickAsync())
		{
			var nodeList = await _mediator.Send(new ListNodesQuery(), CancellationToken.None);
			if (ObjectComparer<V1NodeList>.IsSimilar(nodeList, NodeList) == false)
			{
				NodeList = nodeList;
				StateHasChanged();
			}
		}
	}
}
